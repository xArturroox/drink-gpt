---
description: 
globs: backend\src\main\resources\**
alwaysApply: false
---
# Database: Create migration

Below are several guidelines (or “rules”) that can help generate high-quality Flyway migration files for a Spring Boot application. You can use these conventions to ensure consistency, reliability, and maintainability:
Naming Convention
• Use the format:
  V<VersionNumber>__<DescriptiveName>.sql
  For example, V1__Initial_Setup.sql or V2__Add_User_Table.sql
• Always include a double underscore (__) between the version number and the description.
• Follow a strict incremental order with version numbers.
• For repeatable migrations, use the prefix R (e.g., R__Refresh_View.sql).
File Location & Organization
• Place all migration files in the default Flyway location (typically src/main/resources/db/migration) unless your configuration specifies otherwise.
• Keep each migration focused on a single change or logical grouping of changes.
Descriptive Content
• Start each migration file with a short header comment that explains the purpose of the migration, its impact, and any important notes for maintainers.
• Use clear, consistent SQL formatting and comments within the file.


## SQL Guidelines

Write H2 SQL code for Supabase migration files that:

- Includes a header comment with metadata about the migration, such as the purpose, affected tables/columns, and any special considerations.
- Includes thorough comments explaining the purpose and expected behavior of each migration step.
- Write all SQL in lowercase.
- Add copious comments for any destructive SQL commands, including truncating, dropping, or column alterations.
- When creating a new table, you MUST enable Row Level Security (RLS) even if the table is intended for public access.
- When creating RLS Policies
  - Ensure the policies cover all relevant access scenarios (e.g. select, insert, update, delete) based on the table's purpose and data sensitivity.
  - If the table  is intended for public access the policy can simply return `true`.
  - Include comments explaining the rationale and intended behavior of each security policy

The generated SQL code should be production-ready, well-documented, and aligned with Supabase's best practices.
